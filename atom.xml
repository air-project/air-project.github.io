<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浩汝烟海</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://air-project.github.io/"/>
  <updated>2018-11-11T15:09:39.309Z</updated>
  <id>https://air-project.github.io/</id>
  
  <author>
    <name>air</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BlockingQueue翻译</title>
    <link href="https://air-project.github.io/2018/11/11/BlockingQueue%E7%BF%BB%E8%AF%91/"/>
    <id>https://air-project.github.io/2018/11/11/BlockingQueue翻译/</id>
    <published>2018-11-11T15:02:51.000Z</published>
    <updated>2018-11-11T15:09:39.309Z</updated>
    
    <content type="html"><![CDATA[<h4 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h4><h5 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * A &#123;@link java.util.Queue&#125; that additionally supports operations</span><br><span class="line"> * that wait for the queue to become non-empty when retrieving an</span><br><span class="line"> * element, and wait for space to become available in the queue when</span><br><span class="line"> * storing an element.</span><br><span class="line"> </span><br><span class="line"> * A Queue额外支持在检索元素时等待队列变为非空和</span><br><span class="line"> 在存储元素时等待队列中的空间变得可用的操作</span><br><span class="line"> </span><br><span class="line"> * &#123;@code BlockingQueue&#125; methods come in four forms, with different ways</span><br><span class="line"> * of handling operations that cannot be satisfied immediately, but may be</span><br><span class="line"> * satisfied at some point in the future:  </span><br><span class="line"> </span><br><span class="line">  BlockingQueue方法有四种形式，具有不同的操作方式，不能立即满足，但可能在将来的某个时间点满足</span><br><span class="line">  </span><br><span class="line"> * one throws an exception, the second returns a special value (either</span><br><span class="line"> * &#123;@code null&#125; or &#123;@code false&#125;, depending on the operation), the third</span><br><span class="line"> * blocks the current thread indefinitely until the operation can succeed,</span><br><span class="line"> * and the fourth blocks for only a given maximum time limit before giving</span><br><span class="line"> * up.  </span><br><span class="line"> 一个抛出异常，第二个返回一个特殊值（ null或false ，具体取决于操作），第三个程序将无限期地阻止当前线程，直到操作成功为止，</span><br><span class="line"> 而第四个程序块在放弃之前只有给定的最大时限。</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"> *</span><br><span class="line"> * A &#123;@code BlockingQueue&#125; does not accept &#123;@code null&#125; elements.</span><br><span class="line"> * Implementations throw &#123;@code NullPointerException&#125; on attempts</span><br><span class="line"> * to &#123;@code add&#125;, &#123;@code put&#125; or &#123;@code offer&#125; a &#123;@code null&#125;.  A</span><br><span class="line"> * &#123;@code null&#125; is used as a sentinel value to indicate failure of</span><br><span class="line"> * &#123;@code poll&#125; operations.</span><br><span class="line"> </span><br><span class="line">  A BlockingQueue不接受null元素。 实现抛出NullPointerException上尝试add </span><br><span class="line">  put或offer一个null 。 A null用作哨兵值以指示poll操作失败。</span><br><span class="line"> </span><br><span class="line"> *</span><br><span class="line"> * A &#123;@code BlockingQueue&#125; may be capacity bounded. At any given</span><br><span class="line"> * time it may have a &#123;@code remainingCapacity&#125; beyond which no</span><br><span class="line"> * additional elements can be &#123;@code put&#125; without blocking.</span><br><span class="line"> * A &#123;@code BlockingQueue&#125; without any intrinsic capacity constraints always</span><br><span class="line"> * reports a remaining capacity of &#123;@code Integer.MAX_VALUE&#125;.</span><br><span class="line"> * </span><br><span class="line">   A BlockingQueue可能是容量有限的。 在任何给定的时间它可能有一个remainingCapacity超过其中没有额外的元素可以put没有阻止。 没有任何内在容量限制的A BlockingQueue总是报告剩余容量为Integer.MAX_VALUE </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"> * &#123;@code BlockingQueue&#125; implementations are designed to be used</span><br><span class="line"> * primarily for producer-consumer queues, but additionally support</span><br><span class="line"> * the &#123;@link java.util.Collection&#125; interface.  So, for example, it is</span><br><span class="line"> * possible to remove an arbitrary element from a queue using</span><br><span class="line"> * &#123;@code remove(x)&#125;. However, such operations are in general</span><br><span class="line"> * &lt;em&gt;not&lt;/em&gt; performed very efficiently, and are intended for only</span><br><span class="line"> * occasional use, such as when a queued message is cancelled.</span><br><span class="line"> * </span><br><span class="line">   BlockingQueue实现被设计为主要用于生产者 - 消费者队列，但另外支持Collection接口。 因此，例如，可以使用remove(x)从队列中删除任意元素。 然而，这样的操作通常不能非常有效地执行，并且仅用于偶尔使用，例如当排队的消息被取消时。</span><br><span class="line"> </span><br><span class="line"> * &#123;@code BlockingQueue&#125; implementations are thread-safe.  All</span><br><span class="line"> * queuing methods achieve their effects atomically using internal</span><br><span class="line"> * locks or other forms of concurrency control. However, the</span><br><span class="line"> * &lt;em&gt;bulk&lt;/em&gt; Collection operations &#123;@code addAll&#125;,</span><br><span class="line"> * &#123;@code containsAll&#125;, &#123;@code retainAll&#125; and &#123;@code removeAll&#125; are</span><br><span class="line"> * &lt;em&gt;not&lt;/em&gt; necessarily performed atomically unless specified</span><br><span class="line"> * otherwise in an implementation. So it is possible, for example, for</span><br><span class="line"> * &#123;@code addAll(c)&#125; to fail (throwing an exception) after adding</span><br><span class="line"> * only some of the elements in &#123;@code c&#125;.</span><br><span class="line"> *</span><br><span class="line">   BlockingQueue实现是线程安全的。 所有排队方法使用内部锁或其他形式的并发控制在原子上实现其效果。 然而， 大量的Collection操作addAll ， containsAll ， retainAll和removeAll 不一定原子除非在实现中另有规定执行。 因此有可能，例如，为addAll(c)到只增加一些元件在后失败（抛出异常） c 。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> * A &#123;@code BlockingQueue&#125; does &lt;em&gt;not&lt;/em&gt; intrinsically support</span><br><span class="line"> * any kind of &amp;quot;close&amp;quot; or &amp;quot;shutdown&amp;quot; operation to</span><br><span class="line"> * indicate that no more items will be added.  The needs and usage of</span><br><span class="line"> * such features tend to be implementation-dependent. For example, a</span><br><span class="line"> * common tactic is for producers to insert special</span><br><span class="line"> * &lt;em&gt;end-of-stream&lt;/em&gt; or &lt;em&gt;poison&lt;/em&gt; objects, that are</span><br><span class="line"> * interpreted accordingly when taken by consumers.</span><br><span class="line"> * </span><br><span class="line">   A BlockingQueue上不支持任何类型的“关闭”或“关闭”操作，表示不再添加项目。 这些功能的需求和使用往往依赖于实现。 例如，一个常见的策略是生产者插入特殊的尾流或毒物 ，这些消费者在被消费者摄取时被相应地解释</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"> *  </span><br><span class="line"> * Usage example, based on a typical producer-consumer scenario.</span><br><span class="line"> * Note that a &#123;@code BlockingQueue&#125; can safely be used with multiple</span><br><span class="line"> * producers and multiple consumers.</span><br><span class="line"> 使用示例，基于典型的生产者 - 消费者场景。 请注意， BlockingQueue可以安全地与多个生产者和多个消费者一起使用。</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">* class Producer implements Runnable &#123;</span><br><span class="line">*   private final BlockingQueue queue;</span><br><span class="line">*   Producer(BlockingQueue q) &#123; queue = q; &#125;</span><br><span class="line">*   public void run() &#123;</span><br><span class="line">*     try &#123;</span><br><span class="line">*       while (true) &#123; queue.put(produce()); &#125;</span><br><span class="line">*     &#125; catch (InterruptedException ex) &#123; ... handle ...&#125;</span><br><span class="line">*   &#125;</span><br><span class="line">*   Object produce() &#123; ... &#125;</span><br><span class="line">* &#125;</span><br><span class="line">*</span><br><span class="line">* class Consumer implements Runnable &#123;</span><br><span class="line">*   private final BlockingQueue queue;</span><br><span class="line">*   Consumer(BlockingQueue q) &#123; queue = q; &#125;</span><br><span class="line">*   public void run() &#123;</span><br><span class="line">*     try &#123;</span><br><span class="line">*       while (true) &#123; consume(queue.take()); &#125;</span><br><span class="line">*     &#125; catch (InterruptedException ex) &#123; ... handle ...&#125;</span><br><span class="line">*   &#125;</span><br><span class="line">*   void consume(Object x) &#123; ... &#125;</span><br><span class="line">* &#125;</span><br><span class="line">*</span><br><span class="line">* class Setup &#123;</span><br><span class="line">*   void main() &#123;</span><br><span class="line">*     BlockingQueue q = new SomeQueueImplementation();</span><br><span class="line">*     Producer p = new Producer(q);</span><br><span class="line">*     Consumer c1 = new Consumer(q);</span><br><span class="line">*     Consumer c2 = new Consumer(q);</span><br><span class="line">*     new Thread(p).start();</span><br><span class="line">*     new Thread(c1).start();</span><br><span class="line">*     new Thread(c2).start();</span><br><span class="line">*   &#125;</span><br><span class="line">* &#125;&#125; </span><br><span class="line">*</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* Memory consistency effects: As with other concurrent</span><br><span class="line">* collections, actions in a thread prior to placing an object into a</span><br><span class="line">* &#123;@code BlockingQueue&#125;</span><br><span class="line">* &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">* actions subsequent to the access or removal of that element from</span><br><span class="line">* the &#123;@code BlockingQueue&#125; in another thread.</span><br><span class="line">*</span><br><span class="line">* 存储器一致性效果：当与其他并发集合，事先将物体放置成在一个线程动作BlockingQueue</span><br><span class="line"></span><br><span class="line">  happen-before到该元素的从访问或移除后续动作BlockingQueue在另一个线程。</span><br></pre></td></tr></table></figure><h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">public interface BlockingQueue&lt;E&gt; extends Queue&lt;E&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Inserts the specified element into this queue if it is possible to do</span><br><span class="line">     * so immediately without violating capacity restrictions, returning</span><br><span class="line">     * &#123;@code true&#125; upon success and throwing an</span><br><span class="line">     * &#123;@code IllegalStateException&#125; if no space is currently available.</span><br><span class="line">     * When using a capacity-restricted queue, it is generally preferable to</span><br><span class="line">     * use &#123;@link #offer(Object) offer&#125;.</span><br><span class="line">     *</span><br><span class="line">     * 将指定的元素插入此队列中，如果它是立即可行且不会违反容量限制，返回true在成功和抛出IllegalStateException如果当前没有空间可用。 当使用容量限制队列时，通常最好使用offer 。</span><br><span class="line">     */</span><br><span class="line">    boolean add(E e);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Inserts the specified element into this queue if it is possible to do</span><br><span class="line">     * so immediately without violating capacity restrictions, returning</span><br><span class="line">     * &#123;@code true&#125; upon success and &#123;@code false&#125; if no space is currently</span><br><span class="line">     * available.  When using a capacity-restricted queue, this method is</span><br><span class="line">     * generally preferable to &#123;@link #add&#125;, which can fail to insert an</span><br><span class="line">     * element only by throwing an exception.</span><br><span class="line">     *</span><br><span class="line">     * 将指定的元素插入此队列中，如果它是立即可行且不会违反容量限制，返回true在成功和false ，如果当前没有空间可用。 当使用容量限制队列时，此方法通常优于add(E) ，这可能无法仅通过抛出异常来插入元素。</span><br><span class="line">     */</span><br><span class="line">    boolean offer(E e);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Inserts the specified element into this queue, waiting if necessary</span><br><span class="line">     * for space to become available.</span><br><span class="line">     *</span><br><span class="line">     * 将指定的元素插入到此队列中，等待空间可用。</span><br><span class="line">     */</span><br><span class="line">    void put(E e) throws InterruptedException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Inserts the specified element into this queue, waiting up to the</span><br><span class="line">     * specified wait time if necessary for space to become available.</span><br><span class="line">     *</span><br><span class="line">     * 将指定的元素插入到此队列中，等待指定的等待时间（如有必要）才能使空间变得可用。</span><br><span class="line">     */</span><br><span class="line">    boolean offer(E e, long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Retrieves and removes the head of this queue, waiting if necessary</span><br><span class="line">     * until an element becomes available.</span><br><span class="line">     *</span><br><span class="line">     * 检索并删除此队列的头，如有必要，等待元素可用。</span><br><span class="line">     */</span><br><span class="line">    E take() throws InterruptedException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Retrieves and removes the head of this queue, waiting up to the</span><br><span class="line">     * specified wait time if necessary for an element to become available.</span><br><span class="line">     *</span><br><span class="line">     * 检索并删除此队列的头，等待指定的等待时间（如有必要）使元素变为可用。</span><br><span class="line">     */</span><br><span class="line">    E poll(long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns the number of additional elements that this queue can ideally</span><br><span class="line">     * (in the absence of memory or resource constraints) accept without</span><br><span class="line">     * blocking, or &#123;@code Integer.MAX_VALUE&#125; if there is no intrinsic</span><br><span class="line">     * limit.</span><br><span class="line">     *</span><br><span class="line">     返回该队列最好可以（在没有存储器或资源约束）接受而不会阻塞，或附加的元素的数量Integer.MAX_VALUE如果没有固有的限制。</span><br><span class="line">     </span><br><span class="line">     * &lt;p&gt;Note that you &lt;em&gt;cannot&lt;/em&gt; always tell if an attempt to insert</span><br><span class="line">     * an element will succeed by inspecting &#123;@code remainingCapacity&#125;</span><br><span class="line">     * because it may be the case that another thread is about to</span><br><span class="line">     * insert or remove an element.</span><br><span class="line">     *</span><br><span class="line">     *  请注意，您不能总是通过检查remainingCapacity来判断是否尝试插入元素，因为可能是另一个线程即将插入或删除元素的情况</span><br><span class="line">     */</span><br><span class="line">    int remainingCapacity();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Removes a single instance of the specified element from this queue,</span><br><span class="line">     * if it is present.  More formally, removes an element &#123;@code e&#125; such</span><br><span class="line">     * that &#123;@code o.equals(e)&#125;, if this queue contains one or more such</span><br><span class="line">     * elements.</span><br><span class="line">     * Returns &#123;@code true&#125; if this queue contained the specified element</span><br><span class="line">     * (or equivalently, if this queue changed as a result of the call).</span><br><span class="line">     *</span><br><span class="line">     * 从该队列中删除指定元素的单个实例（如果存在）。 更正式地，删除一个元素e ，使得o.equals(e) ，如果这个队列包含一个或多个这样的元素。 如果此队列包含指定的元素（或等效地，如果此队列作为调用的结果而更改），则返回true 。</span><br><span class="line">     */</span><br><span class="line">    boolean remove(Object o);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns &#123;@code true&#125; if this queue contains the specified element.</span><br><span class="line">     * More formally, returns &#123;@code true&#125; if and only if this queue contains</span><br><span class="line">     * at least one element &#123;@code e&#125; such that &#123;@code o.equals(e)&#125;.</span><br><span class="line">     *</span><br><span class="line">     * 如果此队列包含指定的元素，则返回true 。 更正式地，返回true如果且仅当这个队列至少包含一个元素e ，使得o.equals(e) 。</span><br><span class="line">     */</span><br><span class="line">    public boolean contains(Object o);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Removes all available elements from this queue and adds them</span><br><span class="line">     * to the given collection.  This operation may be more</span><br><span class="line">     * efficient than repeatedly polling this queue.  A failure</span><br><span class="line">     * encountered while attempting to add elements to</span><br><span class="line">     * collection &#123;@code c&#125; may result in elements being in neither,</span><br><span class="line">     * either or both collections when the associated exception is</span><br><span class="line">     * thrown.  Attempts to drain a queue to itself result in</span><br><span class="line">     * &#123;@code IllegalArgumentException&#125;. Further, the behavior of</span><br><span class="line">     * this operation is undefined if the specified collection is</span><br><span class="line">     * modified while the operation is in progress.</span><br><span class="line">     *</span><br><span class="line">     * 从该队列中删除所有可用的元素，并将它们添加到给定的集合中。 此操作可能比重复轮询此队列更有效。 尝试向集合c添加元素时遇到的c可能会导致在抛出关联的异常时，</span><br><span class="line">     元素既不在两个集合中，也可能不是两个集合。 尝试将队列排入自身会导致IllegalArgumentException 。 此外，如果在操作进行中修改了指定的集合，则此操作的行为是未定义的。</span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line">    int drainTo(Collection&lt;? super E&gt; c);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Removes at most the given number of available elements from</span><br><span class="line">     * this queue and adds them to the given collection.  A failure</span><br><span class="line">     * encountered while attempting to add elements to</span><br><span class="line">     * collection &#123;@code c&#125; may result in elements being in neither,</span><br><span class="line">     * either or both collections when the associated exception is</span><br><span class="line">     * thrown.  Attempts to drain a queue to itself result in</span><br><span class="line">     * &#123;@code IllegalArgumentException&#125;. Further, the behavior of</span><br><span class="line">     * this operation is undefined if the specified collection is</span><br><span class="line">     * modified while the operation is in progress.</span><br><span class="line">     *</span><br><span class="line">     * 最多从该队列中删除给定数量的可用元素，并将它们添加到给定的集合中。 尝试向集合c添加元素时遇到的c可能会导致在抛出关联的异常时，</span><br><span class="line">     元素既不在两个集合中，也可能不是两个集合。 尝试将队列排入自身导致IllegalArgumentException 。 此外，如果在操作进行中修改了指定的集合，则此操作的行为是未定义的。</span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line">    int drainTo(Collection&lt;? super E&gt; c, int maxElements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>是一种线程安全的队列</li><li>一般用于这样的场景：一个线程生产对象，另一个线程来消耗对象</li><li>不能向BlockingQueue中插入null,否则会抛出NullPointerException异常</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;翻译&quot;&gt;&lt;a href=&quot;#翻译&quot; class=&quot;headerlink&quot; title=&quot;翻译&quot;&gt;&lt;/a&gt;翻译&lt;/h4&gt;&lt;h5 id=&quot;类注释&quot;&gt;&lt;a href=&quot;#类注释&quot; class=&quot;headerlink&quot; title=&quot;类注释&quot;&gt;&lt;/a&gt;类注释&lt;/h5&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * A &amp;#123;@link java.util.Queue&amp;#125; that additionally supports operations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * that wait for the queue to become non-empty when retrieving an&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * element, and wait for space to become available in the queue when&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * storing an element.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * A Queue额外支持在检索元素时等待队列变为非空和&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 在存储元素时等待队列中的空间变得可用的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code BlockingQueue&amp;#125; methods come in four forms, with different ways&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * of handling operations that cannot be satisfied immediately, but may be&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * satisfied at some point in the future:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BlockingQueue方法有四种形式，具有不同的操作方式，不能立即满足，但可能在将来的某个时间点满足&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * one throws an exception, the second returns a special value (either&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code null&amp;#125; or &amp;#123;@code false&amp;#125;, depending on the operation), the third&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * blocks the current thread indefinitely until the operation can succeed,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * and the fourth blocks for only a given maximum time limit before giving&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * up.  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 一个抛出异常，第二个返回一个特殊值（ null或false ，具体取决于操作），第三个程序将无限期地阻止当前线程，直到操作成功为止，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 而第四个程序块在放弃之前只有给定的最大时限。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * A &amp;#123;@code BlockingQueue&amp;#125; does not accept &amp;#123;@code null&amp;#125; elements.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Implementations throw &amp;#123;@code NullPointerException&amp;#125; on attempts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * to &amp;#123;@code add&amp;#125;, &amp;#123;@code put&amp;#125; or &amp;#123;@code offer&amp;#125; a &amp;#123;@code null&amp;#125;.  A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code null&amp;#125; is used as a sentinel value to indicate failure of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code poll&amp;#125; operations.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A BlockingQueue不接受null元素。 实现抛出NullPointerException上尝试add &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  put或offer一个null 。 A null用作哨兵值以指示poll操作失败。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * A &amp;#123;@code BlockingQueue&amp;#125; may be capacity bounded. At any given&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * time it may have a &amp;#123;@code remainingCapacity&amp;#125; beyond which no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * additional elements can be &amp;#123;@code put&amp;#125; without blocking.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * A &amp;#123;@code BlockingQueue&amp;#125; without any intrinsic capacity constraints always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * reports a remaining capacity of &amp;#123;@code Integer.MAX_VALUE&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   A BlockingQueue可能是容量有限的。 在任何给定的时间它可能有一个remainingCapacity超过其中没有额外的元素可以put没有阻止。 没有任何内在容量限制的A BlockingQueue总是报告剩余容量为Integer.MAX_VALUE &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code BlockingQueue&amp;#125; implementations are designed to be used&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * primarily for producer-consumer queues, but additionally support&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * the &amp;#123;@link java.util.Collection&amp;#125; interface.  So, for example, it is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * possible to remove an arbitrary element from a queue using&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code remove(x)&amp;#125;. However, such operations are in general&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; performed very efficiently, and are intended for only&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * occasional use, such as when a queued message is cancelled.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   BlockingQueue实现被设计为主要用于生产者 - 消费者队列，但另外支持Collection接口。 因此，例如，可以使用remove(x)从队列中删除任意元素。 然而，这样的操作通常不能非常有效地执行，并且仅用于偶尔使用，例如当排队的消息被取消时。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code BlockingQueue&amp;#125; implementations are thread-safe.  All&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * queuing methods achieve their effects atomically using internal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * locks or other forms of concurrency control. However, the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;em&amp;gt;bulk&amp;lt;/em&amp;gt; Collection operations &amp;#123;@code addAll&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code containsAll&amp;#125;, &amp;#123;@code retainAll&amp;#125; and &amp;#123;@code removeAll&amp;#125; are&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; necessarily performed atomically unless specified&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * otherwise in an implementation. So it is possible, for example, for&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code addAll(c)&amp;#125; to fail (throwing an exception) after adding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * only some of the elements in &amp;#123;@code c&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   BlockingQueue实现是线程安全的。 所有排队方法使用内部锁或其他形式的并发控制在原子上实现其效果。 然而， 大量的Collection操作addAll ， containsAll ， retainAll和removeAll 不一定原子除非在实现中另有规定执行。 因此有可能，例如，为addAll(c)到只增加一些元件在后失败（抛出异常） c 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * A &amp;#123;@code BlockingQueue&amp;#125; does &amp;lt;em&amp;gt;not&amp;lt;/em&amp;gt; intrinsically support&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * any kind of &amp;amp;quot;close&amp;amp;quot; or &amp;amp;quot;shutdown&amp;amp;quot; operation to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * indicate that no more items will be added.  The needs and usage of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * such features tend to be implementation-dependent. For example, a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * common tactic is for producers to insert special&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;em&amp;gt;end-of-stream&amp;lt;/em&amp;gt; or &amp;lt;em&amp;gt;poison&amp;lt;/em&amp;gt; objects, that are&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * interpreted accordingly when taken by consumers.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   A BlockingQueue上不支持任何类型的“关闭”或“关闭”操作，表示不再添加项目。 这些功能的需求和使用往往依赖于实现。 例如，一个常见的策略是生产者插入特殊的尾流或毒物 ，这些消费者在被消费者摄取时被相应地解释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Usage example, based on a typical producer-consumer scenario.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Note that a &amp;#123;@code BlockingQueue&amp;#125; can safely be used with multiple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * producers and multiple consumers.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 使用示例，基于典型的生产者 - 消费者场景。 请注意， BlockingQueue可以安全地与多个生产者和多个消费者一起使用。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="源码" scheme="https://air-project.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="jkd8" scheme="https://air-project.github.io/tags/jkd8/"/>
    
  </entry>
  
  <entry>
    <title>Queue翻译</title>
    <link href="https://air-project.github.io/2018/11/11/Queue%E7%BF%BB%E8%AF%91/"/>
    <id>https://air-project.github.io/2018/11/11/Queue翻译/</id>
    <published>2018-11-11T10:14:24.000Z</published>
    <updated>2018-11-11T11:11:21.134Z</updated>
    
    <content type="html"><![CDATA[<h4 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h4><h5 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">A collection designed for holding elements prior to processing.</span><br><span class="line">一个设计用来保存需要预先处理元素的Collection</span><br><span class="line"></span><br><span class="line">Besides basic &#123;@link java.util.Collection Collection&#125; operations,</span><br><span class="line">queues provide additional insertion, extraction, and inspection</span><br><span class="line">operations.  </span><br><span class="line">除了基本的 Collection操作,队列提供额外的插入、提取和检验操作</span><br><span class="line"></span><br><span class="line">Each of these methods exists in two forms: one throws</span><br><span class="line">an exception if the operation fails, the other returns a special</span><br><span class="line">value (either &#123;@code null&#125; or &#123;@code false&#125;, depending on the</span><br><span class="line">operation).  </span><br><span class="line"></span><br><span class="line">这些方法中存在两种形式:</span><br><span class="line">一个抛出一个异常,如果操作失败, </span><br><span class="line">另一个返回一个特殊的值( null或者 false,根据操作)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The latter form of the insert operation is designed</span><br><span class="line">specifically for use with capacity-restricted &#123;@code Queue&#125;</span><br><span class="line">implementations; </span><br><span class="line"></span><br><span class="line">后者的插入操作形式是专门为使用容量限制 Queue实现;</span><br><span class="line"></span><br><span class="line">in most implementations, insert operations cannot  fail.</span><br><span class="line"></span><br><span class="line">在大多数实现,insert操作不能失败。</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="六个主要方法"><a href="#六个主要方法" class="headerlink" title="六个主要方法"></a>六个主要方法</h5><table><thead><tr><th>method</th><th>Throws exception</th><th>Returns special value</th></tr></thead><tbody><tr><td>Insert</td><td>add(e)</td><td>offer(e)</td></tr><tr><td>Remove</td><td>remove()</td><td>poll()</td></tr><tr><td>Examine</td><td>element()</td><td>peek()</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">Queues typically, but do not necessarily, order elements in a</span><br><span class="line">FIFO (first-in-first-out) manner. </span><br><span class="line"></span><br><span class="line">队列通常,但不一定,顺序元素FIFO(先进先出)的方式</span><br><span class="line"></span><br><span class="line">Among the exceptions are</span><br><span class="line">priority queues, which order elements according to a supplied</span><br><span class="line">comparator, or the elements&apos; natural ordering, and LIFO queues (or</span><br><span class="line">stacks) which order the elements LIFO (last-in-first-out).</span><br><span class="line"></span><br><span class="line">例如在优先队列中,顺序元素根据提供的比较器,或者元素的自然顺序,后进先出队列顺序(或堆栈)后进先出的元素。</span><br><span class="line">   </span><br><span class="line">Whatever the ordering used, the &lt;em&gt;head&lt;/em&gt; of the queue is that</span><br><span class="line">element which would be removed by a call to &#123;@link #remove() &#125; or</span><br><span class="line">&#123;@link #poll()&#125;.  In a FIFO queue, all new elements are inserted at</span><br><span class="line">the &lt;em&gt;tail&lt;/em&gt; of the queue. Other kinds of queues may use</span><br><span class="line">different placement rules.  Every &#123;@code Queue&#125; implementation</span><br><span class="line">must specify its ordering properties.</span><br><span class="line"></span><br><span class="line">无论使用哪种顺序,队列的头部是元素将被调用remove()或poll()。在FIFO队列,所有新元素插入到队列的尾部。</span><br><span class="line">其他类型的队列可能使用不同的放置规则。每个Queue实现必须指定其排序属性。</span><br><span class="line"></span><br><span class="line">The &#123;@link #offer offer&#125; method inserts an element if possible,</span><br><span class="line">otherwise returning &#123;@code false&#125;.  This differs from the &#123;@link</span><br><span class="line">java.util.Collection#add Collection.add&#125; method, which can fail to</span><br><span class="line">add an element only by throwing an unchecked exception.  The</span><br><span class="line">&#123;@code offer&#125; method is designed for use when failure is a normal,</span><br><span class="line">rather than exceptional occurrence, for example, in fixed-capacity</span><br><span class="line">(or &amp;quot;bounded&amp;quot;) queues.</span><br><span class="line"></span><br><span class="line">offer方法插入一个元素如果可能,否则返回false。</span><br><span class="line">这不同于Collection.add方法,它可以不添加一个元素只有抛出未检测的异常。</span><br><span class="line">offer方法是设计用于当失败是正常的,而不是特殊情况,例如,在固定电容(或“有界”)队列。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The &#123;@link #remove()&#125; and &#123;@link #poll()&#125; methods remove and</span><br><span class="line">return the head of the queue.</span><br><span class="line">Exactly which element is removed from the queue is a</span><br><span class="line">function of the queue&apos;s ordering policy, which differs from</span><br><span class="line">implementation to implementation. The &#123;@code remove()&#125; and</span><br><span class="line">&#123;@code poll()&#125; methods differ only in their behavior when the</span><br><span class="line">queue is empty: the &#123;@code remove()&#125; method throws an exception,</span><br><span class="line">while the &#123;@code poll()&#125; method returns &#123;@code null&#125;.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">remove()和poll()方法删除并返回队列的头部。从队列中删除哪些元素是一个函数队列的排序策略,这不同于实现来实现。</span><br><span class="line">remove()和poll()方法不同队列为空时:remove()方法抛出一个异常,而poll()方法返回null。</span><br><span class="line"></span><br><span class="line">The &#123;@link #element()&#125; and &#123;@link #peek()&#125; methods return, but do</span><br><span class="line">not remove, the head of the queue.</span><br><span class="line">element() peek()方法返回,但不要删除队列的头部。</span><br><span class="line"></span><br><span class="line">The &#123;@code Queue&#125; interface does not define the &lt;i&gt;blocking queue</span><br><span class="line">methods&lt;/i&gt;, which are common in concurrent programming.  These methods,</span><br><span class="line">which wait for elements to appear or for space to become available, are</span><br><span class="line">defined in the &#123;@link java.util.concurrent.BlockingQueue&#125; interface, which</span><br><span class="line">extends this interface.</span><br><span class="line"></span><br><span class="line">Queue接口没有定义阻塞队列的方法,常见的并发编程。</span><br><span class="line">这些方法,等待元素出现或空间可用BlockingQueue接口中定义,扩展这个接口。</span><br><span class="line"></span><br><span class="line">&#123;@code Queue&#125; implementations generally do not allow insertion</span><br><span class="line">of &#123;@code null&#125; elements, although some implementations, such as</span><br><span class="line">&#123;@link LinkedList&#125;, do not prohibit insertion of &#123;@code null&#125;.</span><br><span class="line">Even in the implementations that permit it, &#123;@code null&#125; should</span><br><span class="line">not be inserted into a &#123;@code Queue&#125;, as &#123;@code null&#125; is also</span><br><span class="line">used as a special return value by the &#123;@code poll&#125; method to</span><br><span class="line">indicate that the queue contains no elements.</span><br><span class="line"></span><br><span class="line">Queue null元素的实现通常不允许插入,尽管一些实现,如LinkedList、不禁止插入null。</span><br><span class="line">即使在允许它的实现,null不应插入一个Queue null也用作特殊poll返回值的方法表明,队列中不包含任何元素。</span><br><span class="line"></span><br><span class="line">&#123;@code Queue&#125; implementations generally do not define</span><br><span class="line">element-based versions of methods &#123;@code equals&#125; and</span><br><span class="line">&#123;@code hashCode&#125; but instead inherit the identity based versions</span><br><span class="line">from class &#123;@code Object&#125;, because element-based equality is not</span><br><span class="line">always well-defined for queues with the same elements but different</span><br><span class="line">ordering properties.</span><br><span class="line"></span><br><span class="line">Queue实现通常不定义的元素版本方法equals hashCode而是继承类Object的基于身份的版本,</span><br><span class="line">因为元素相同的平等并不总是明确的队列元素但不同排序属性。</span><br></pre></td></tr></table></figure><h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public interface Queue&lt;E&gt; extends Collection&lt;E&gt; &#123;</span><br><span class="line">/**</span><br><span class="line"> * Inserts the specified element into this queue if it is possible to do so</span><br><span class="line"> * immediately without violating capacity restrictions, returning</span><br><span class="line"> * &#123;@code true&#125; upon success and throwing an &#123;@code IllegalStateException&#125;</span><br><span class="line"> * if no space is currently available.</span><br><span class="line"> * 将指定的元素插入此队列能否立即这样做,在不违反容量限制,返回 true成功</span><br><span class="line">   和抛出 IllegalStateException如果没有目前可用的空间</span><br><span class="line"> */</span><br><span class="line">boolean add(E e);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Inserts the specified element into this queue if it is possible to do</span><br><span class="line"> * so immediately without violating capacity restrictions.</span><br><span class="line"> * When using a capacity-restricted queue, this method is generally</span><br><span class="line"> * preferable to &#123;@link #add&#125;, which can fail to insert an element only</span><br><span class="line"> * by throwing an exception.</span><br><span class="line"> * 将指定的元素插入此队列能否立即这样做,在不违反容量限制。</span><br><span class="line">   使用capacity-restricted队列时,这种方法通常比 add(E),无法插入一个元素只有通过抛出异常。</span><br><span class="line"> */</span><br><span class="line">boolean offer(E e);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Retrieves and removes the head of this queue.  This method differs</span><br><span class="line"> * from &#123;@link #poll poll&#125; only in that it throws an exception if this</span><br><span class="line"> * queue is empty.</span><br><span class="line"> * 检索并删除此队列的头。这个方法与 poll唯一的不同之处在于,它将抛出一个异常,如果这个队列是空的。</span><br><span class="line"> */</span><br><span class="line">E remove();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Retrieves and removes the head of this queue,</span><br><span class="line"> * or returns &#123;@code null&#125; if this queue is empty.</span><br><span class="line"> * 检索并删除此队列的头,或者返回 null如果这个队列是空的。</span><br><span class="line"> */</span><br><span class="line">E poll();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Retrieves, but does not remove, the head of this queue.  This method</span><br><span class="line"> * differs from &#123;@link #peek peek&#125; only in that it throws an exception</span><br><span class="line"> * if this queue is empty.</span><br><span class="line"> * 检索,但不删除此队列的头。这个方法与 peek唯一的不同之处在于,它将抛出一个异常,如果这个队列是空的。</span><br><span class="line"> */</span><br><span class="line">E element();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Retrieves, but does not remove, the head of this queue,</span><br><span class="line"> * or returns &#123;@code null&#125; if this queue is empty.</span><br><span class="line"> * 检索,但不删除此队列的头,或者返回 null如果这个队列是空的。</span><br><span class="line"> */</span><br><span class="line">E peek();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>队列是什么？就是用来装一组元素的集合</li><li>队列并不都是FIFO</li><li>队列并不提供阻塞（由子类实现)</li><li>队列可以指定容量</li><li>一类抛异常一类为不抛</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;翻译&quot;&gt;&lt;a href=&quot;#翻译&quot; class=&quot;headerlink&quot; title=&quot;翻译&quot;&gt;&lt;/a&gt;翻译&lt;/h4&gt;&lt;h5 id=&quot;类注释&quot;&gt;&lt;a href=&quot;#类注释&quot; class=&quot;headerlink&quot; title=&quot;类注释&quot;&gt;&lt;/a&gt;类注释&lt;/h5&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A collection designed for holding elements prior to processing.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个设计用来保存需要预先处理元素的Collection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Besides basic &amp;#123;@link java.util.Collection Collection&amp;#125; operations,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;queues provide additional insertion, extraction, and inspection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;operations.  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;除了基本的 Collection操作,队列提供额外的插入、提取和检验操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Each of these methods exists in two forms: one throws&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;an exception if the operation fails, the other returns a special&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value (either &amp;#123;@code null&amp;#125; or &amp;#123;@code false&amp;#125;, depending on the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;operation).  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这些方法中存在两种形式:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一个抛出一个异常,如果操作失败, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另一个返回一个特殊的值( null或者 false,根据操作)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The latter form of the insert operation is designed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;specifically for use with capacity-restricted &amp;#123;@code Queue&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;implementations; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;后者的插入操作形式是专门为使用容量限制 Queue实现;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;in most implementations, insert operations cannot  fail.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在大多数实现,insert操作不能失败。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="源码" scheme="https://air-project.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="jkd8" scheme="https://air-project.github.io/tags/jkd8/"/>
    
  </entry>
  
  <entry>
    <title>深度解析jdk8-AbstractQueuedSynchronizer的实现分析下</title>
    <link href="https://air-project.github.io/2018/09/24/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90jdk8-AbstractQueuedSynchronizer%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90%E4%B8%8B/"/>
    <id>https://air-project.github.io/2018/09/24/深度解析jdk8-AbstractQueuedSynchronizer的实现分析下/</id>
    <published>2018-09-24T10:32:39.000Z</published>
    <updated>2018-11-11T09:55:22.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过本系列的上半部分JDK1.8 AbstractQueuedSynchronizer的实现分析（上）的解读，相信很多读者已经对AbstractQueuedSynchronizer(下文简称AQS)的独占功能了然于胸,<br>那么这次我们通过对另一个工具类:CountDownLatch的分析来解读AQS的另外一个功能：共享功能。</p><h3 id="AQS共享功能的实现"><a href="#AQS共享功能的实现" class="headerlink" title="AQS共享功能的实现"></a>AQS共享功能的实现</h3><p>在开始解读AQS的共享功能前，我们再重温一下CountDownLatch，CountDownLatch为java.util.concurrent包下的计数器工具类，<br>常被用在多线程环境下，它在初始时需要指定一个计数器的大小，然后可被多个线程并发的实现减1操作，并在计数器为0后调用await方法的线程被唤醒，<br>从而实现多线程间的协作。它在多线程环境下的基本使用方式为：</p><a id="more"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> //main thread</span><br><span class="line"> // 新建一个CountDownLatch，并指制定一个初始大小</span><br><span class="line"> CountDownLatch countDownLatch = new CountDownLatch(3);</span><br><span class="line"> // 调用await方法后，main线程将阻塞在这里，直到countDownLatch 中的计数为0 </span><br><span class="line"> countDownLatch.await();</span><br><span class="line"> System.out.println(&quot;over&quot;);</span><br><span class="line"></span><br><span class="line">//thread1</span><br><span class="line">// do something </span><br><span class="line">//...........</span><br><span class="line">//调用countDown方法，将计数减1</span><br><span class="line"> countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//thread2</span><br><span class="line">// do something </span><br><span class="line">//...........</span><br><span class="line">//调用countDown方法，将计数减1</span><br><span class="line"> countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">  //thread3</span><br><span class="line">// do something </span><br><span class="line">//...........</span><br><span class="line">//调用countDown方法，将计数减1</span><br><span class="line"> countDownLatch.countDown();</span><br></pre></td></tr></table></figure><p> 注意，线程thread 1,2,3各自调用 countDown后，countDownLatch 的计数为0，await方法返回，控制台输入“over”,在此之前main thread 会一直沉睡。</p><p>可以看到CountDownLatch的作用类似于一个“栏栅”，在CountDownLatch的计数为0前，调用await方法的线程将一直阻塞，直到CountDownLatch计数为0，await方法才会返回，</p><p>而CountDownLatch的countDown()方法则一般由各个线程调用，实现CountDownLatch计数的减1。</p><p>知道了CountDownLatch的基本使用方式，我们就从上述DEMO的第一行new CountDownLatch（3）开始，看看CountDownLatch是怎么实现的。</p><p>首先，看下CountDownLatch的构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public CountDownLatch(int count) &#123;</span><br><span class="line">    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</span><br><span class="line">    this.sync = new Sync(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>和ReentrantLock类似，CountDownLatch内部也有一个叫做Sync的内部类，同样也是用它继承了AQS。</p><p>再看下Sync：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sync(int count) &#123;</span><br><span class="line">    setState(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你看过本系列的上半部分，你对setState方法一定不会陌生，它是AQS的一个“状态位”，在不同的场景下，代表不同的含义，比如在ReentrantLock中，表示加锁的次数，在CountDownLatch中，则表示CountDownLatch的计数器的初始大小。<br><img src="https://res.infoq.com/articles/java8-abstractqueuedsynchronizer/zh/resources/0815012.png" alt=""><br>设置完计数器大小后CountDownLatch的构造方法返回，下面我们再看下CountDownLatch的await()方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void await() throws InterruptedException &#123;</span><br><span class="line">    sync.acquireSharedInterruptibly(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用了Sync的acquireSharedInterruptibly方法，因为Sync是AQS子类的原因，这里其实是直接调用了AQS的acquireSharedInterruptibly方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public final void acquireSharedInterruptibly(int arg)</span><br><span class="line">        throws InterruptedException &#123;</span><br><span class="line">    if (Thread.interrupted())</span><br><span class="line">        throw new InterruptedException();</span><br><span class="line">    if (tryAcquireShared(arg) &lt; 0)</span><br><span class="line">        doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从方法名上看，这个方法的调用是响应线程的打断的，所以在前两行会检查下线程是否被打断。接着，尝试着获取共享锁，小于0，表示获取失败，通过本系列的上半部分的解读， 我们知道AQS在获取锁的思路是，先尝试直接获取锁，如果失败会将当前线程放在队列中，按照FIFO的原则等待锁。而对于共享锁也是这个思路，如果和独占锁一致，这里的tryAcquireShared应该是个空方法，留给子类去判断:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected int tryAcquireShared(int arg) &#123;</span><br><span class="line">    throw new UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再看看CountDownLatch：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected int tryAcquireShared(int acquires) &#123;</span><br><span class="line">    return (getState() == 0) ? 1 : -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果state变成0了，则返回1，表示获取成功，否则返回-1则表示获取失败。</p><p>看到这里，读者可能会发现， await方法的获取方式更像是在获取一个独占锁，那为什么这里还会用tryAcquireShared呢？</p><p>回想下CountDownLatch的await方法是不是只能在主线程中调用？答案是否定的，CountDownLatch的await方法可以在多个线程中调用，当CountDownLatch的计数器为0后，调用await的方法都会依次返回。 也就是说可以多个线程同时在等待await方法返回，所以它被设计成了实现tryAcquireShared方法，获取的是一个共享锁，锁在所有调用await方法的线程间共享，所以叫共享锁。</p><p>回到acquireSharedInterruptibly方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public final void acquireSharedInterruptibly(int arg)</span><br><span class="line">        throws InterruptedException &#123;</span><br><span class="line">    if (Thread.interrupted())</span><br><span class="line">        throw new InterruptedException();</span><br><span class="line">    if (tryAcquireShared(arg) &lt; 0)</span><br><span class="line">        doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果获取共享锁失败（返回了-1，说明state不为0，也就是CountDownLatch的计数器还不为0），进入调用doAcquireSharedInterruptibly方法中，按照我们上述的猜想，应该是要将当前线程放入到队列中去。</p><p>在这之前，我们再回顾一下AQS队列的数据结构：AQS是一个双向链表，通过节点中的next，pre变量分别指向当前节点后一个节点和前一个节点。其中，每个节点中都包含了一个线程和一个类型变量：表示当前节点是独占节点还是共享节点，头节点中的线程为正在占有锁的线程，而后的所有节点的线程表示为正在等待获取锁的线程。如下图所示：<br><img src="https://res.infoq.com/articles/java8-abstractqueuedsynchronizer/zh/resources/0815018.png" alt=""><br>黄色节点为头节点，表示正在获取锁的节点，剩下的蓝色节点（Node1、Node2、Node3）为正在等待锁的节点，他们通过各自的next、pre变量分别指向前后节点，形成了AQS中的双向链表。每个线程被加上类型（共享还是独占）后便是一个Node， 也就是本文中说的节点。</p><p>再看看doAcquireSharedInterruptibly方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private void doAcquireSharedInterruptibly(int arg)</span><br><span class="line">        throws InterruptedException &#123;</span><br><span class="line">        final Node node = addWaiter(Node.SHARED); </span><br><span class="line">//将当前线程包装为类型为Node.SHARED的节点，标示这是一个共享节点。</span><br><span class="line">        boolean failed = true;</span><br><span class="line">        try &#123;</span><br><span class="line">            for (;;) &#123;</span><br><span class="line">                final Node p = node.predecessor();</span><br><span class="line">                if (p == head) &#123;</span><br><span class="line">//如果新建节点的前一个节点，就是Head，说明当前节点是AQS队列中等待获取锁的第一个节点，</span><br><span class="line">//按照FIFO的原则，可以直接尝试获取锁。</span><br><span class="line">                    int r = tryAcquireShared(arg);</span><br><span class="line">                    if (r &gt;= 0) &#123;</span><br><span class="line">                        setHeadAndPropagate(node, r); </span><br><span class="line">//获取成功，需要将当前节点设置为AQS队列中的第一个节点，这是AQS的规则//队列的头节点表示正在获取锁的节点</span><br><span class="line">                        p.next = null; // help GC</span><br><span class="line">                        failed = false;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; //检查下是否需要将当前节点挂起</span><br><span class="line">                    parkAndCheckInterrupt()) </span><br><span class="line">                    throw new InterruptedException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里有几点需要说明的：</p><ol><li>setHeadAndPropagate方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void setHeadAndPropagate(Node node, int propagate) &#123;</span><br><span class="line">    Node h = head; // Record old head for check below</span><br><span class="line">    setHead(node); </span><br><span class="line">    if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 ||</span><br><span class="line">        (h = head) == null || h.waitStatus &lt; 0) &#123;</span><br><span class="line">        Node s = node.next;</span><br><span class="line">        if (s == null || s.isShared())</span><br><span class="line">            doReleaseShared();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>首先，使用了CAS更换了头节点，然后，将当前节点的下一个节点取出来，如果同样是“shared”类型的，再做一个”releaseShared”操作。</p><p>看下doReleaseShared方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">for (;;) &#123;</span><br><span class="line">            Node h = head;</span><br><span class="line">            if (h != null &amp;&amp; h != tail) &#123;</span><br><span class="line">                int ws = h.waitStatus;</span><br><span class="line">                if (ws == Node.SIGNAL) &#123; </span><br><span class="line">                    if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0)) </span><br><span class="line">//如果当前节点是SIGNAL意味着，它正在等待一个信号，  </span><br><span class="line">//或者说，它在等待被唤醒，因此做两件事，1是重置waitStatus标志位，2是重置成功后,唤醒下一个节点。</span><br><span class="line">                        continue;            // loop to recheck cases</span><br><span class="line">                    unparkSuccessor(h);</span><br><span class="line">                &#125;</span><br><span class="line">                else if (ws == 0 &amp;&amp;</span><br><span class="line">                         !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))  </span><br><span class="line">//如果本身头节点的waitStatus是出于重置状态（waitStatus==0）的，将其设置为“传播”状态。</span><br><span class="line">//意味着需要将状态向后一个节点传播。</span><br><span class="line">                    continue;                // loop on failed CAS</span><br><span class="line">            &#125;</span><br><span class="line">            if (h == head)                   // loop if head changed</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>为什么要这么做呢？这就是共享功能和独占功能最不一样的地方，对于独占功能来说，有且只有一个线程（通常只对应一个节点，拿ReentantLock举例，如果当前持有锁的线程重复调用lock()方法，那根据本系列上半部分我们的介绍，我们知道，会被包装成多个节点在AQS的队列中，所以用一个线程来描述更准确），能够获取锁，但是对于共享功能来说。</p><p>共享的状态是可以被共享的，也就是意味着其他AQS队列中的其他节点也应能第一时间知道状态的变化。因此，一个节点获取到共享状态流程图是这样的：<br>比如现在有如下队列：<br>当Node1调用tryAcquireShared成功后，更换了头节点：<br><img src="https://res.infoq.com/articles/java8-abstractqueuedsynchronizer/zh/resources/0815020.png" alt=""><br>     Node1变成了头节点然后调用unparkSuccessor()方法唤醒了Node2、Node2中持有的线程A出于上面流程图的park node的位置，</p><p>线程A被唤醒后，重复黄色线条的流程，重新检查调用tryAcquireShared方法，看能否成功，如果成功，则又更改头节点，重复以上步骤，以实现节点自身获取共享锁成功后，唤醒下一个共享类型节点的操作，实现共享状态的向后传递。</p><p>2.其实对于doAcquireShared方法，AQS还提供了集中类似的实现：<br><img src="https://res.infoq.com/articles/java8-abstractqueuedsynchronizer/zh/resources/0815021.png" alt=""><br>分别对应了：</p><ol><li>带参数请求共享锁。 （忽略中断）</li><li>带参数请求共享锁，且响应中断。（每次循环时，会检查当前线程的中断状态，以实现对线程中断的响应）</li><li>带参数请求共享锁但是限制等待时间。（第二个参数设置超时时间，超出时间后，方法返回。）<br><img src="https://res.infoq.com/articles/java8-abstractqueuedsynchronizer/zh/resources/0815022.png" alt=""><br>比较特别的为最后一个doAcquireSharedNanos方法，我们一起看下它怎么实现超时时间的控制的。</li></ol><p>因为该方法和其余获取共享锁的方法逻辑是类似的，我用红色框圈出了它所不一样的地方，也就是实现超时时间控制的地方。</p><p>可以看到，其实就是在进入方法时，计算出了一个“deadline”，每次循环的时候用当前时间和“deadline”比较，大于“dealine”说明超时时间已到，直接返回方法。</p><p>注意，最后一个红框中的这行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nanosTimeout &gt; spinForTimeoutThreshold</span><br></pre></td></tr></table></figure></p><p>从变量的字面意思可知，这是拿超时时间和超时自旋的最小作比较，在这里Doug Lea把超时自旋的阈值设置成了1000ns,即只有超时时间大于1000ns才会去挂起线程，否则，再次循环，以实现“自旋”操作。这是“自旋”在AQS中的应用之处。</p><p>看完await方法，我们再来看下countDown()方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void countDown() &#123;</span><br><span class="line">    sync.releaseShared(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用了AQS的releaseShared方法,并传入了参数1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public final boolean releaseShared(int arg) &#123;</span><br><span class="line">    if (tryReleaseShared(arg)) &#123;</span><br><span class="line">        doReleaseShared();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样先尝试去释放锁，tryReleaseShared同样为空方法，留给子类自己去实现，以下是CountDownLatch的内部类Sync的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected boolean tryReleaseShared(int releases) &#123;</span><br><span class="line">        // Decrement count; signal when transition to zero</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            int c = getState();</span><br><span class="line">            if (c == 0)</span><br><span class="line">                return false;</span><br><span class="line">            int nextc = c-1;</span><br><span class="line">            if (compareAndSetState(c, nextc))</span><br><span class="line">                return nextc == 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>死循环更新state的值，实现state的减1操作，之所以用死循环是为了确保state值的更新成功。</p><p>从上文的分析中可知，如果state的值为0，在CountDownLatch中意味：所有的子线程已经执行完毕，这个时候可以唤醒调用await()方法的线程了，而这些线程正在AQS的队列中，并被挂起的，</p><p>所以下一步应该去唤醒AQS队列中的头节点了（AQS的队列为FIFO队列），然后由头节点去依次唤醒AQS队列中的其他共享节点。</p><p>如果tryReleaseShared返回true,进入doReleaseShared()方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void doReleaseShared() &#123;</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            Node h = head;</span><br><span class="line">            if (h != null &amp;&amp; h != tail) &#123;</span><br><span class="line">                int ws = h.waitStatus;</span><br><span class="line">                if (ws == Node.SIGNAL) &#123; </span><br><span class="line">                    if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0)) </span><br><span class="line">//如果当前节点是SIGNAL意味着，它正在等待一个信号，</span><br><span class="line"> //或者说，它在等待被唤醒，因此做两件事，1是重置waitStatus标志位，2是重置成功后,唤醒下一个节点。</span><br><span class="line">                        continue;            // loop to recheck cases</span><br><span class="line">                    unparkSuccessor(h);</span><br><span class="line">                &#125;</span><br><span class="line">                else if (ws == 0 &amp;&amp;</span><br><span class="line">                         !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))  </span><br><span class="line">//如果本身头节点的waitStatus是出于重置状态（waitStatus==0）的，将其设置为“传播”状态。</span><br><span class="line">//意味着需要将状态向后一个节点传播。</span><br><span class="line">                    continue;                // loop on failed CAS</span><br><span class="line">            &#125;</span><br><span class="line">            if (h == head)                   // loop if head changed</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>当线程被唤醒后，会重新尝试获取共享锁，而对于CountDownLatch线程获取共享锁判断依据是state是否为0，而这个时候显然state已经变成了0，因此可以顺利获取共享锁并且依次唤醒AQS队里中后面的节点及对应的线程。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文从CountDownLatch入手，深入分析了AQS关于共享锁方面的实现方式：</p><p>如果获取共享锁失败后，将请求共享锁的线程封装成Node对象放入AQS的队列中，并挂起Node对象对应的线程，实现请求锁线程的等待操作。待共享锁可以被获取后，从头节点开始，依次唤醒头节点及其以后的所有共享类型的节点。实现共享状态的传播。</p><p>这里有几点值得注意：<br>与AQS的独占功能一样，共享锁是否可以被获取的判断为空方法，交由子类去实现。<br>与AQS的独占功能不同，当锁被头节点获取后，独占功能是只有头节点获取锁，其余节点的线程继续沉睡，等待锁被释放后，才会唤醒下一个节点的线程，而共享功能是只要头节点获取锁成功，就在唤醒自身节点对应的线程的同时，继续唤醒AQS队列中的下一个节点的线程，每个节点在唤醒自身的同时还会唤醒下一个节点对应的线程，以实现共享状态的“向后传播”，从而实现共享功能。<br>以上的分析都是从AQS子类的角度去看待AQS的部分功能的，而如果直接看待AQS，或许可以这么去解读：</p><p>首先，AQS并不关心“是什么锁”，对于AQS来说它只是实现了一系列的用于判断“资源”是否可以访问的API,并且封装了在“访问资源”受限时将请求访问的线程的加入队列、挂起、唤醒等操作， AQS只关心“资源不可以访问时，怎么处理？”、“资源是可以被同时访问，还是在同一时间只能被一个线程访问？”、“如果有线程等不及资源了，怎么从AQS的队列中退出？”等一系列围绕资源访问的问题，而至于“资源是否可以被访问？”这个问题则交给AQS的子类去实现。</p><p>当AQS的子类是实现独占功能时，例如ReentrantLock，“资源是否可以被访问”被定义为只要AQS的state变量不为0，并且持有锁的线程不是当前线程，则代表资源不能访问。</p><p>当AQS的子类是实现共享功能时，例如：CountDownLatch，“资源是否可以被访问”被定义为只要AQS的state变量不为0，说明资源不能访问。</p><p>这是典型的将规则和操作分开的设计思路：规则子类定义，操作逻辑因为具有公用性，放在父类中去封装。</p><p>当然，正式因为AQS只是关心“资源在什么条件下可被访问”，所以子类还可以同时使用AQS的共享功能和独占功能的API以实现更为复杂的功能。</p><p>比如：ReentrantReadWriteLock，我们知道ReentrantReadWriteLock的中也有一个叫Sync的内部类继承了AQS，而AQS的队列可以同时存放共享锁和独占锁，对于ReentrantReadWriteLock来说分别代表读锁和写锁，当队列中的头节点为读锁时，代表读操作可以执行，而写操作不能执行，因此请求写操作的线程会被挂起，当读操作依次推出后，写锁成为头节点，请求写操作的线程被唤醒，可以执行写操作，而此时的读请求将被封装成Node放入AQS的队列中。如此往复，实现读写锁的读写交替进行。</p><p>而本系列文章上半部分提到的FutureTask，其实思路也是：封装一个存放线程执行结果的变量A,使用AQS的独占API实现线程对变量A的独占访问，判断规则是，线程没有执行完毕：call()方法没有返回前，不能访问变量A，或者是超时时间没到前不能访问变量A(这就是FutureTask的get方法可以实现获取线程执行结果时，设置超时时间的原因)。<br>原网页地址：<a href="http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer#" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer#</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;经过本系列的上半部分JDK1.8 AbstractQueuedSynchronizer的实现分析（上）的解读，相信很多读者已经对AbstractQueuedSynchronizer(下文简称AQS)的独占功能了然于胸,&lt;br&gt;那么这次我们通过对另一个工具类:CountDownLatch的分析来解读AQS的另外一个功能：共享功能。&lt;/p&gt;
&lt;h3 id=&quot;AQS共享功能的实现&quot;&gt;&lt;a href=&quot;#AQS共享功能的实现&quot; class=&quot;headerlink&quot; title=&quot;AQS共享功能的实现&quot;&gt;&lt;/a&gt;AQS共享功能的实现&lt;/h3&gt;&lt;p&gt;在开始解读AQS的共享功能前，我们再重温一下CountDownLatch，CountDownLatch为java.util.concurrent包下的计数器工具类，&lt;br&gt;常被用在多线程环境下，它在初始时需要指定一个计数器的大小，然后可被多个线程并发的实现减1操作，并在计数器为0后调用await方法的线程被唤醒，&lt;br&gt;从而实现多线程间的协作。它在多线程环境下的基本使用方式为：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深度解析jdk8-AbstractQueuedSynchronizer的实现分析上</title>
    <link href="https://air-project.github.io/2018/09/24/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90jdk8-AbstractQueuedSynchronizer%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90%E4%B8%8A/"/>
    <id>https://air-project.github.io/2018/09/24/深度解析jdk8-AbstractQueuedSynchronizer的实现分析上/</id>
    <published>2018-09-24T08:25:37.000Z</published>
    <updated>2018-11-11T09:55:05.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java中的FutureTask作为可异步执行任务并可获取执行结果而被大家所熟知。通常可以使用future.get()来获取线程的执行结果，在线程执行结束之前，get方法会一直阻塞状态，<br>直到call()返回，其优点是使用线程异步执行任务的情况下还可以获取到线程的执行结果，但是FutureTask的以上功能却是依靠通过一个叫AbstractQueuedSynchronizer的类来实现，<br>至少在JDK1.5、JDK1.6版本是这样的（从1.7开始FutureTask已经被其作者Doug Lea修改为不再依赖AbstractQueuedSynchronizer实现了，这是JDK1.7的变化之一）。<br><a id="more"></a><br>但是AbstractQueuedSynchronizer在JDK1.8中还有如下图所示的众多子类：<br><img src="https://res.infoq.com/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730000.png" alt=""><br>这些JDK中的工具类或多或少都被大家用过不止一次，比如ReentrantLock，我们知道ReentrantLock的功能是实现代码段的并发访问控制，<br>也就是通常意义上所说的锁，在没有看到AbstractQueuedSynchronizer前，可能会以为它的实现是通过类似于synchronized，通过对对象加锁来实现的。<br>但事实上它仅仅是一个工具类！没有使用更“高级”的机器指令，不是关键字，也不依靠JDK编译时的特殊处理，仅仅作为一个普普通通的类就完成了代码块的并发访问控制，<br>这就更让人疑问它怎么实现的代码块的并发访问控制的了。那就让我们一起来仔细看下Doug Lea怎么去实现的这个锁。为了方便，本文中使用AQS代替AbstractQueuedSynchronizer。</p><h2 id="细说AQS"><a href="#细说AQS" class="headerlink" title="细说AQS"></a>细说AQS</h2><p>在深入分析AQS之前，我想先从AQS的功能上说明下AQS，站在使用者的角度，AQS的功能可以分为两类：独占功能和共享功能，它的所有子类中，要么实现并使用了它独占功能的API，要么使用了共享锁的功能，而不会同时使用两套API，即便是它最有名的子类ReentrantReadWriteLock，也是通过两个内部类：读锁和写锁，分别实现的两套API来实现的，为什么这么做，后面我们再分析，到目前为止，我们只需要明白AQS在功能上有独占控制和共享控制两种功能即可。</p><h3 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a>独占锁</h3><p>在真正对解读AQS之前，我想先从使用了它独占控制功能的子类ReentrantLock说起，分析ReentrantLock的同时看一看AQS的实现，再推理出AQS独特的设计思路和实现方式。最后，再看其共享控制功能的实现。<br>对于ReentrantLock，使用过的同学应该都知道，通常是这么用它的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reentrantLock.lock()</span><br><span class="line">//do something</span><br><span class="line">reentrantLock.unlock()</span><br></pre></td></tr></table></figure></p><p>ReentrantLock会保证 do something在同一时间只有一个线程在执行这段代码，或者说，同一时刻只有一个线程的lock方法会返回。其余线程会被挂起，直到获取锁。从这里可以看出，其实ReentrantLock实现的就是一个独占锁的功能：有且只有一个线程获取到锁，其余线程全部挂起，直到该拥有锁的线程释放锁，被挂起的线程被唤醒重新开始竞争锁。没错，ReentrantLock使用的就是AQS的独占API实现的。<br>那现在我们就从ReentrantLock的实现开始一起看看重入锁是怎么实现的。<br>首先看lock方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void lock() &#123;</span><br><span class="line">    sync.lock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如FutureTask（JDK1.6）一样，ReentrantLock内部有代理类完成具体操作，ReentrantLock只是封装了统一的一套API而已。值得注意的是，使用过ReentrantLock的同学应该知道，ReentrantLock又分为公平锁和非公平锁，所以，ReentrantLock内部只有两个sync的实现：<br><img src="https://res.infoq.com/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730002.png" alt=""><br>公平锁：每个线程抢占锁的顺序为先后调用lock方法的顺序依次获取锁，类似于排队吃饭。<br>非公平锁：每个线程抢占锁的顺序不定，谁运气好，谁就获取到锁，和调用lock方法的先后顺序无关，类似于堵车时，加塞的那些XXXX。<br>到这里，通过ReentrantLock的功能和锁的所谓排不排队的方式，我们是否可以这么猜测ReentrantLock或者AQS的实现（现在不清楚谁去实现这些功能）：有那么一个被volatile修饰的标志位叫做key，用来表示有没有线程拿走了锁，或者说，锁还存不存在，还需要一个线程安全的队列，维护一堆被挂起的线程，以至于当锁被归还时，能通知到这些被挂起的线程，可以来竞争获取锁了。<br>至于公平锁和非公平锁，唯一的区别是在获取锁的时候是直接去获取锁，还是进入队列排队的问题了。为了验证我们的猜想，我们继续看一下ReentrantLock中公平锁的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final void lock() &#123;</span><br><span class="line">        acquire(1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>调用到了AQS的acquire方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public final void acquire(int arg) &#123; //tryAcquire 由子类实现，模板方法模式</span><br><span class="line">    if (!tryAcquire(arg) &amp;&amp; //如果没有获取到，则addWaiter加入等待队列，并挂起线程</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt(); //挂起后唤醒返回的中断状态是true的话，这里会中断当前线程</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从方法名字上看语义是，尝试获取锁，获取不到则创建一个waiter（当前线程）后放到队列中，这和我们猜测的好像很类似。[G1]先看下tryAcquire方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected boolean tryAcquire(int arg) &#123;</span><br><span class="line">    throw new UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>留空了，Doug Lea是想留给子类去实现（既然要给子类实现，应该用抽象方法，但是Doug Lea没有这么做，原因是AQS有两种功能，面向两种使用场景，需要给子类定义的方法都是抽象方法了，会导致子类无论如何都需要实现另外一种场景的抽象方法，显然，这对子类来说是不友好的。）<br>看下FairSync的tryAcquire方法：<br>getState方法是AQS的方法，因为在AQS里面有个叫statede的标志位 :<br><img src="https://res.infoq.com/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730007.png" alt=""><br>事实上，这个state就是前面我们猜想的那个“key”！<br>回到tryAcquire方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">protected final boolean tryAcquire(int acquires) &#123;</span><br><span class="line">    final Thread current = Thread.currentThread();//获取当前线程</span><br><span class="line">    int c = getState();  //获取父类AQS中的标志位</span><br><span class="line">    if (c == 0) &#123;</span><br><span class="line">        if (!hasQueuedPredecessors() &amp;&amp; </span><br><span class="line">            //如果队列中没有其他线程  说明没有线程正在占有锁！</span><br><span class="line">            compareAndSetState(0, acquires)) &#123; </span><br><span class="line">            //修改一下状态位，注意：这里的acquires是在lock的时候传递来的，从上面的图中可以知道，这个值是写死的1</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            //如果通过CAS操作将状态为更新成功则代表当前线程获取锁，因此，将当前线程设置到AQS的一个变量中，说明这个线程拿走了锁。</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">     //如果不为0 意味着，锁已经被拿走了，但是，因为ReentrantLock是重入锁，</span><br><span class="line">     //是可以重复lock,unlock的，只要成对出现行。一次。这里还要再判断一次 获取锁的线程是不是当前请求锁的线程。</span><br><span class="line">        int nextc = c + acquires;//如果是的，累加在state字段上就可以了。</span><br><span class="line">        if (nextc &lt; 0)</span><br><span class="line">            throw new Error(&quot;Maximum lock count exceeded&quot;);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，如果如果获取锁，tryAcquire返回true，反之，返回false，回到AQS的acquire方法。<br>如果没有获取到锁，按照我们的描述，应该将当前线程放到队列中去，只不过，在放之前，需要做些包装。<br>先看addWaiter方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private Node addWaiter(Node mode) &#123;</span><br><span class="line">    //初始化一个node节点</span><br><span class="line">    Node node = new Node(Thread.currentThread(), mode); </span><br><span class="line">    //先尝试直接加入到尾节点后面</span><br><span class="line">    // Try the fast path of enq; backup to full enq on failure</span><br><span class="line">    Node pred = tail;</span><br><span class="line">    if (pred != null) &#123;</span><br><span class="line">        node.prev = pred;//从这里也可以看出，先将node的pre指向尾节点，然后cas设置tail，再将原tail的next指向新节点，</span><br><span class="line">        //所以可能next为空的情况存在,但是已经加入的节点的pre肯定是存在</span><br><span class="line">        if (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //失败的话，for循环loop加入</span><br><span class="line">    enq(node);</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用当前线程去构造一个Node对象，mode是一个表示Node类型的字段，仅仅表示这个节点是独占的，还是共享的，或者说，AQS的这个队列中，哪些节点是独占的，哪些是共享的。<br>这里lock调用的是AQS独占的API，当然，可以写死是独占状态的节点。<br>创建好节点后，将节点加入到队列尾部，此处，在队列不为空的时候，先尝试通过cas方式修改尾节点为最新的节点，如果修改失败，意味着有并发，这个时候才会进入enq中死循环，“自旋”方式修改。<br>将线程的节点接入到队里中后，当然还需要做一件事:将当前线程挂起！这个事，由acquireQueued来做。<br>在解释acquireQueued之前，我们需要先看下AQS中队列的内存结构，我们知道，队列由Node类型的节点组成，其中至少有两个变量，一个封装线程，一个封装节点类型。<br>而实际上，它的内存结构是这样的（第一次节点插入时，第一个节点是一个空节点，代表有一个线程已经获取锁，事实上，队列的第一个节点就是代表持有锁的节点）：<br><img src="https://res.infoq.com/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730009.png" alt=""><br>黄色节点为队列默认的头节点，每次有线程竞争失败，进入队列后其实都是插入到队列的尾节点（tail后面）后面。这个从enq方法可以看出来，上文中有提到enq方法为将节点插入队列的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private Node enq(final Node node) &#123;</span><br><span class="line"></span><br><span class="line">        //loop操作，tail不存在的情况会初始化一个空节点，并将head和tail都指向空节点，</span><br><span class="line">        //然后cas加入node，确保节点一定会加入</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            Node t = tail;</span><br><span class="line">            if (t == null) &#123; // Must initialize</span><br><span class="line">                if (compareAndSetHead(new Node()))</span><br><span class="line">                    tail = head;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                node.prev = t;</span><br><span class="line">                if (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                    t.next = node;</span><br><span class="line">                    return t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>再回来看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class="line">    boolean failed = true;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean interrupted = false;</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            final Node p = node.predecessor();</span><br><span class="line">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">         //如果当前的节点是head说明他是队列中第一个“有效的”节点，因此尝试获取，上文中有提到这个类是交给子类去扩展的。</span><br><span class="line">                setHead(node);//成功后，将上图中的黄色节点移除，Node1变成头节点。</span><br><span class="line">                p.next = null; // help GC</span><br><span class="line">                failed = false;</span><br><span class="line">                return interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; </span><br><span class="line">            //否则，检查前一个节点的状态为，看当前获取锁失败的线程是否需要挂起。</span><br><span class="line">                parkAndCheckInterrupt()) </span><br><span class="line">           //如果需要，借助JUC包下的LockSopport类的静态方法Park挂起当前线程。知道被唤醒。</span><br><span class="line">                interrupted = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (failed) //如果有异常</span><br><span class="line">            cancelAcquire(node);// 取消请求，对应到队列操作，就是将当前节点从队列中移除。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这块代码有几点需要说明： </p><ol><li>Node节点中，除了存储当前线程，节点类型，队列中前后元素的变量，还有一个叫waitStatus的变量，改变量用于描述节点的状态，为什么需要这个状态呢？<br>原因是：AQS的队列中，在有并发时，肯定会存取一定数量的节点，每个节点[G4] 代表了一个线程的状态，有的线程可能“等不及”获取锁了，需要放弃竞争，退出队列，有的线程在等待一些条件满足，满足后才恢复执行（这里的描述很像某个J.U.C包下的工具类，ReentrankLock的Condition，事实上，Condition同样也是AQS的子类）等等，总之，各个线程有各个线程的状态，但总需要一个变量来描述它，这个变量就叫waitStatus,它有四种状态：<br><img src="https://res.infoq.com/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730011.png" alt=""><br>分别表示：  </li></ol><ul><li>节点取消  </li><li>节点等待触发  </li><li>节点等待条件  </li><li>节点状态需要向后传播。  </li></ul><p>只有当前节点的前一个节点为SIGNAL时，才能当前节点才能被挂起。</p><ol start="2"><li>对线程的挂起及唤醒操作是通过使用UNSAFE类调用JNI方法实现的。当然，还提供了挂起指定时间后唤醒的API，在后面我们会讲到。<br>到此为止，一个线程对于锁的一次竞争才告于段落，结果有两种，要么成功获取到锁（不用进入到AQS队列中），要么，获取失败，被挂起，等待下次唤醒后继续循环尝试获取锁，值得注意的是，AQS的队列为FIFO队列，所以，每次被CPU假唤醒，且当前线程不是出在头节点的位置，也是会被挂起的。AQS通过这样的方式，实现了竞争的排队策略。<br>看完了获取锁，在看看释放锁，具体看代码之前，我们可以先继续猜下，释放操作需要做哪些事情：<br>因为获取锁的线程的节点，此时在AQS的头节点位置，所以，可能需要将头节点移除。<br>而应该是直接释放锁，然后找到AQS的头节点，通知它可以来竞争锁了。<br>是不是这样呢?我们继续来看下，同样我们用ReentrantLock的FairSync来说明：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void unlock() &#123;</span><br><span class="line">    sync.release(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final boolean release(int arg) &#123;</span><br><span class="line">    if (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        if (h != null &amp;&amp; h.waitStatus != 0)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>unlock方法调用了AQS的release方法，同样传入了参数1，和获取锁的相应对应，获取一个锁，标示为+1，释放一个锁，标志位-1。<br>同样，release为空方法，子类自己实现逻辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">protected final boolean tryRelease(int releases) &#123;</span><br><span class="line">        int c = getState() - releases; </span><br><span class="line">        if (Thread.currentThread() != getExclusiveOwnerThread()) //如果释放的线程和获取锁的线程不是同一个，抛出非法监视器状态异常。</span><br><span class="line">            throw new IllegalMonitorStateException();</span><br><span class="line">        boolean free = false;</span><br><span class="line">        if (c == 0) &#123;//因为是重入的关系，不是每次释放锁c都等于0，直到最后一次释放锁时，才通知AQS不需要再记录哪个线程正在获取锁。</span><br><span class="line">            free = true;</span><br><span class="line">            setExclusiveOwnerThread(null);</span><br><span class="line">        &#125;</span><br><span class="line">        setState(c);</span><br><span class="line">        return free;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>释放锁，成功后，找到AQS的头节点，并唤醒它即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">private void unparkSuccessor(Node node) &#123;</span><br><span class="line">        /*</span><br><span class="line">         * If status is negative (i.e., possibly needing signal) try</span><br><span class="line">         * to clear in anticipation of signalling.  It is OK if this</span><br><span class="line">         * fails or if status is changed by waiting thread.</span><br><span class="line">         */</span><br><span class="line">        // 尝试将node的等待状态置为0,这样的话,后继争用线程可以有机会再尝试获取一次锁。</span><br><span class="line">        int ws = node.waitStatus;</span><br><span class="line">        if (ws &lt; 0)</span><br><span class="line">            compareAndSetWaitStatus(node, ws, 0);</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * Thread to unpark is held in successor, which is normally</span><br><span class="line">         * just the next node.  But if cancelled or apparently null,</span><br><span class="line">         * traverse backwards from tail to find the actual</span><br><span class="line">         * non-cancelled successor.</span><br><span class="line">         */</span><br><span class="line">        Node s = node.next;</span><br><span class="line">        if (s == null || s.waitStatus &gt; 0) &#123;</span><br><span class="line">            s = null;</span><br><span class="line">            for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</span><br><span class="line">                if (t.waitStatus &lt;= 0)</span><br><span class="line">                    s = t;</span><br><span class="line">        &#125;</span><br><span class="line">        if (s != null)</span><br><span class="line">            LockSupport.unpark(s.thread);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>值得注意的是，寻找的顺序是从队列尾部开始往前去找的最前面的一个waitStatus小于0的节点。<br>到此，ReentrantLock的lock和unlock方法已经基本解析完毕了，唯独还剩下一个非公平锁NonfairSync没说，其实，它和公平锁的唯一区别就是获取锁的方式不同，一个是按前后顺序一次获取锁，一个是抢占式的获取锁，那ReentrantLock是怎么实现的呢？再看两段代码：<br><img src="https://res.infoq.com/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730015.png" alt=""><br>非公平锁的lock方法的处理方式是: 在lock的时候先直接cas修改一次state变量（尝试获取锁），成功就返回，不成功再排队，从而达到不排队直接抢占的目的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static final class FairSync extends Sync &#123;</span><br><span class="line">    private static final long serialVersionUID = -3000897897090466540L;</span><br><span class="line"></span><br><span class="line">    final void lock() &#123;</span><br><span class="line">        acquire(1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>而对于公平锁：则是老老实实的开始就走AQS的流程排队获取锁。如果前面有人调用过其lock方法，则排在队列中前面，也就更有机会更早的获取锁，从而达到“公平”的目的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章，我们从ReentrantLock出发，完整的分析了AQS独占功能的API及内部实现，总的来说，思路其实并不复杂，还是使用的标志位+队列的方式，记录获取锁、竞争锁、释放锁等一系列锁的状态，或许用更准确一点的描述的话，应该是使用的标志位+队列的方式，记录锁、竞争、释放等一系列独占的状态，因为站在AQS的层面state可以表示锁，也可以表示其他状态，它并不关心它的子类把它变成一个什么工具类，而只是提供了一套维护一个独占状态。甚至，最准确的是AQS只是维护了一个状态，因为，别忘了，它还有一套共享状态的API，所以，AQS只是维护一个状态，一个控制各个线程何时可以访问的状态，它只对状态负责，而这个状态表示什么含义，由子类自己去定义。</p><p>原网页地址：<a href="http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java中的FutureTask作为可异步执行任务并可获取执行结果而被大家所熟知。通常可以使用future.get()来获取线程的执行结果，在线程执行结束之前，get方法会一直阻塞状态，&lt;br&gt;直到call()返回，其优点是使用线程异步执行任务的情况下还可以获取到线程的执行结果，但是FutureTask的以上功能却是依靠通过一个叫AbstractQueuedSynchronizer的类来实现，&lt;br&gt;至少在JDK1.5、JDK1.6版本是这样的（从1.7开始FutureTask已经被其作者Doug Lea修改为不再依赖AbstractQueuedSynchronizer实现了，这是JDK1.7的变化之一）。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建笔记</title>
    <link href="https://air-project.github.io/2018/09/20/Hexo+GitHub%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://air-project.github.io/2018/09/20/Hexo+GitHub搭建笔记/</id>
    <published>2018-09-20T05:14:58.000Z</published>
    <updated>2018-11-11T05:35:16.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-安装"><a href="#Node-安装" class="headerlink" title="Node 安装"></a>Node 安装</h3><p>下载对应版本的<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node</a>,直接下一步安装就行，然后检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v10.10.0</span><br><span class="line">$ npm -v</span><br><span class="line">6.4.1</span><br></pre></td></tr></table></figure><h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><p>下载对应版本的<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>,直接下一步安装就行，然后检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.15.1.windows.2</span><br></pre></td></tr></table></figure><h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir hexo</span><br><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">$ npm install hexo -g</span><br><span class="line">$ hexo -v</span><br><span class="line">hexo: 3.7.1</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Windows_NT 10.0.17134 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 10.10.0</span><br><span class="line">v8: 6.8.275.30-node.24</span><br><span class="line">uv: 1.23.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.14.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.33.0</span><br><span class="line">napi: 3</span><br><span class="line">openssl: 1.1.0i</span><br><span class="line">icu: 62.1</span><br><span class="line">unicode: 11.0</span><br><span class="line">cldr: 33.1</span><br><span class="line">tz: 2018e</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">$ hexo s //启动，打开浏览器http://localhost:4000就能看到了</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Hexo-插件"><a href="#Hexo-插件" class="headerlink" title="Hexo 插件"></a>Hexo 插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">部署到Git,订阅,统计,站内搜索等</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-wordcount --save</span><br><span class="line">$ npm install hexo-generator-search --save</span><br><span class="line">$ npm install hexo-asset-image --save</span><br><span class="line">$ npm install hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-archive --save</span><br><span class="line">$ npm install hexo-generator-category --save</span><br><span class="line">$ npm install hexo-generator-tag --save</span><br><span class="line">$ npm install hexo-server --save</span><br><span class="line">$ npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure><h3 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h3><p>这里只讲几个常用的，<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">更多配置官方</a> || <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">主题next安装</a></p><p>hexo/_config.yml如下这些做修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans //修改为中文</span><br><span class="line">post_asset_folder: <span class="literal">true</span> //图片文件夹</span><br><span class="line"></span><br><span class="line">生成为XXX.MD &gt;$ hexo n <span class="string">"XXX"</span> 并在其中插入图片![](XXX/test.png)</span><br><span class="line"></span><br><span class="line">theme: next //主题默认为landscape</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: ********/air-project.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>hexo/themes/next/_config.yml如下这些做修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br><span class="line">footer:</span><br><span class="line">   icon: heart</span><br><span class="line">   powered: true</span><br><span class="line">   theme: </span><br><span class="line">    version: false</span><br><span class="line">menu:</span><br><span class="line">  home: / || home </span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  totalcount: true</span><br><span class="line">  separated_meta: true</span><br><span class="line"> </span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer:</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer:</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer:</span><br><span class="line"> </span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line"> </span><br><span class="line">pace: true</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure><h3 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxxx&quot;</span><br><span class="line">$ git config --global user.email &quot;xxxx@qq.com&quot;</span><br><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br><span class="line">id_rsa  id_rsa.pub  known_hosts</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;xxxx@qq.com&quot; //三次直接回车，，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator\.ssh）</span><br><span class="line">$ eval &quot;$(ssh-agent -s)&quot; //添加密钥到ssh-agent</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa //添加生成的SSH key到ssh-agent</span><br><span class="line">登录Github，点击头像下的settings，添加ssh</span><br><span class="line">新建一个new ssh key，将id_rsa.pub文件里的内容复制上去,并验证</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi air-project! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="Hexo-简单命令"><a href="#Hexo-简单命令" class="headerlink" title="Hexo 简单命令"></a>Hexo 简单命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重启</span><br><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line">重新生成静态页面，并推送到GitHub</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Node-安装&quot;&gt;&lt;a href=&quot;#Node-安装&quot; class=&quot;headerlink&quot; title=&quot;Node 安装&quot;&gt;&lt;/a&gt;Node 安装&lt;/h3&gt;&lt;p&gt;下载对应版本的&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node&lt;/a&gt;,直接下一步安装就行，然后检查&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v10.10.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.4.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Git-安装&quot;&gt;&lt;a href=&quot;#Git-安装&quot; class=&quot;headerlink&quot; title=&quot;Git 安装&quot;&gt;&lt;/a&gt;Git 安装&lt;/h3&gt;&lt;p&gt;下载对应版本的&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt;,直接下一步安装就行，然后检查&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git --version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git version 2.15.1.windows.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Hexo-安装&quot;&gt;&lt;a href=&quot;#Hexo-安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo 安装&quot;&gt;&lt;/a&gt;Hexo 安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install hexo -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo: 3.7.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo-cli: 1.1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os: Windows_NT 10.0.17134 win32 x64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http_parser: 2.8.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node: 10.10.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v8: 6.8.275.30-node.24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uv: 1.23.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zlib: 1.2.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ares: 1.14.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modules: 64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nghttp2: 1.33.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;napi: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl: 1.1.0i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;icu: 62.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unicode: 11.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cldr: 33.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tz: 2018e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ hexo s //启动，打开浏览器http://localhost:4000就能看到了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO  Start processing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://air-project.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://air-project.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
